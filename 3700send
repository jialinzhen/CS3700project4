#!/usr/bin/python -u
# CS3700, Spring 2015
# Project 2 Starter Code


# sending command script
# ./3700send <recv_host>:<recv_port>

# receiver command script
# ./3700recv <recv_port>


# code only work if network is perfectly reliable, modify it to handle:
# delayed packet: actually delay the number of packet that should be delayed in the sender
# packet retransmission --> dropped packet: wait for ROT and send back 3 ACK of previous received packet 
# duplicate packet: 
# reordered handling:  

# bandwidth
# latency


# drop
# delay
# reorder
# duplicate
import sys
import socket
import time
import datetime
import select
import json

MSG_SIZE = 1500
DATA_SIZE = 1000
TIMEOUT = 30
SEQUENCE = 0
PACKETS_MEMORY = []
ADV_WINDOW = 1
WINDOW = 1
CURRENT_WINDOW = WINDOW

# Bind to localhost and an ephemeral port
IP_PORT = sys.argv[1]
UDP_IP = IP_PORT[0:IP_PORT.find(":")]
UDP_PORT = int(IP_PORT[IP_PORT.find(":")+1:])
dest = (UDP_IP, UDP_PORT)

# UDP_PORT = int(sys.argv[1]) # Set up the socket
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) 
sock.settimeout(TIMEOUT)


def log(string):
  sys.stderr.write(datetime.datetime.now().strftime("%H:%M:%S.%f") + " " + string + "\n")

# complete message is: ('{"ack": false, "data": "dkapwokdpaksdakw[pdk[wkf[apwkd[pawkdpakwdpa[wkf", "eof": true, "sequence": 47}', ('127.0.0.1', 36857))
# change maximum data size
# implementation for sliding window
# getting RTT for delay (dropped packet (duplicated acks) as well as delayed packet as well) --> 
# way to retransmitted and 
# reordered packet: receiver reorder base on sequence number
# offset = len('{"sequence": ' + dataSize + ', " data": , "ack": False, "eof": False}')

def send_next_packet():
  global SEQUENCE
  data = sys.stdin.read()
  dataSize = len(data)
  offset = len(json.dumps({"sequence": dataSize, "data": data, "ack": False, "eof": False})) - dataSize
  # calculate offset
  if dataSize <= DATA_SIZE - offset: 
    if (dataSize > 0):
      SEQUENCE += dataSize
      msg = json.dumps({"sequence": SEQUENCE, "data": data, "ack": False, "eof": True})
      if sock.sendto(msg, dest) < len(msg):
        log("[error] unable to fully send packet")
      else:
        PACKETS_MEMORY.append(msg)
        log("[send data] " + str(SEQUENCE) + " (" + str(len(data)) + ")")
        CURRENT_WINDOW -= 1
        return True
    else:
      return False
  else:
    curSize = 0
    while curSize < dataSize:
      msg = {}
      # if remaining data can be sent as one packet
      if dataSize - curSize <= DATA_SIZE - offset:
        Data = data[curSize: dataSize]
        SEQUENCE += (dataSize - curSize)
        curSize = dataSize
        msg = json.dumps({"sequence": SEQUENCE, "data": Data, "ack": False, "eof": True})
      # otherwise:
      else:
        Data = data[curSize: curSize + (DATA_SIZE - offset)]
        curSize += (DATA_SIZE - offset)
        SEQUENCE += (DATA_SIZE - offset)
        msg = {"sequence": SEQUENCE, "data": Data, "ack": False, "eof": False}
        msg = json.dumps(msg)
      if sock.sendto(msg, dest) < len(msg):
        log("[error] unable to fully send packet")
      else:
        log("[send data] " + str(SEQUENCE) + " (" + str(len(data)) + ")")
        CURRENT_WINDOW -= 1
        PACKETS_MEMORY.append(msg)
        # return True
     # return True 
       
# Send first packet
send_next_packet()

# Now read in data, send packets
while True:
  log("ABOUT TO SLEEP")
  result = sock.recvfrom(MSG_SIZE)
  
  while (CURRENT_WINDOW > 0):
    if (not send_next_packet()):
      break
  CURRENT_WINDOW = WINDOW
  
  if result:
    (data, addr) = result
    try:
      decoded = json.loads(data)
      if decoded['ack'] == "receiver program ended":
        log("sender receive message from receiver about its exit")
        sys.exit(0)
      if decoded["ack"] == "received the wrong packet, sequence number does not match":
        log("receiver receive wrong packet, try to detect which one and resend")
        WINDOW /= 2
        # obtain the current sequence number and compare
        SEQ_COUNT = 0
        # determine packet to send
        for count, packet in enumerate(PACKETS_MEMORY):
          if SEQ_COUNT + len(packet['data']) == decoded['seq']:
             if sock.sendto(PACKETS_MEMORY[count + 1], dest) < len(msg):
               log("[error] unable to fully send packet")
             else:
               log("[send data] " + str(SEQUENCE) + " (" + str(len(data)) + ")")
                CURRENT_WINDOW -= 1
          else:
            SEQ_COUNT += len(packet['data'])
      # If there is an ack, send next packet
      if decoded['ack'] == SEQUENCE:
        log("[recv ack] " + str(SEQUENCE))
        ADV_WINDOW = decoded['window']
        if WINDOW < ADV_WINDOW:
          if WINDOW == 0:
            WINDOW = 2
          else:
            WINDOW *= 2
        else:
          WINDOW += 1
        # Try to send next packet; break if no more data
        if (not send_next_packet()):
          break
    except (ValueError, KeyError, TypeError):
      log("[recv corrupt packet]")
  else:
    log("[error] timeout")
    sys.exit(-1)

sock.sendto(json.dumps({"eof": True, "data": "", "sequence": SEQUENCE, "ack": False}), dest)
sys.exit(0)
